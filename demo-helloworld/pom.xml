<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>demo-helloworld</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>demo-helloworld</name>
  <description>Demo project for Spring Boot</description>

  <parent>
    <groupId>com.xkcoding</groupId>
    <artifactId>spring-boot-demo</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.name}</finalName>
    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!--生成jar,带MF,并指定classpath并指定MF中classpath为:lib/ conf/-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <!--不将配置信息打包到jar包内-->
          <excludes>
            <exclude>*.xml</exclude>
            <exclude>*.properties</exclude>
            <exclude>**/*.properties</exclude>
            <exclude>**/*.xml</exclude>
          </excludes>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>com.xkcoding.helloworld.SpringBootDemoHelloworldApplication</mainClass>
            </manifest>
            <manifestEntries>
              <!-- 在Class-Path下添加配置文件的路径 -->
              <Class-Path>conf/</Class-Path>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>
      <!--复制dependencies(依赖的jar包)到lib目录-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <useBaseVersion>false</useBaseVersion>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--复制resources文件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <useDefaultDelimiters>false</useDefaultDelimiters>
          <delimiters>
            <!-- 默认还有@类型，这里只处理${*}类型 -->
            <delimiter>${*}</delimiter>
          </delimiters>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>resources</goal>
            </goals>
            <configuration>
              <encoding>${project.build.sourceEncoding}</encoding>
              <outputDirectory>${project.basedir}/target/resources-filtered</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>copy-xmls</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <encoding>${project.build.sourceEncoding}</encoding>
              <outputDirectory>${project.basedir}/target/conf</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/target/resources-filtered</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-docker</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <encoding>${project.build.sourceEncoding}</encoding>
              <outputDirectory>${project.basedir}/target/docker</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/docker</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--将target中的三个目录(*.jar,lib,conf)打包成zip/tar.gz/tar.bz2三种格式的文件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <!--如果只想有finalName，则添加配置-->
          <appendAssemblyId>false</appendAssemblyId>
          <descriptors>
            <descriptor>src/assembly/bin.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--springBoot默认，该插件会在打jar包时引入依赖包，jar包包含所有依赖的其他jar包，项目可直接快速运行（java -jar xx.jar）-->
      <!--      <plugin>-->
      <!--        <groupId>org.springframework.boot</groupId>-->
      <!--        <artifactId>spring-boot-maven-plugin</artifactId>-->
      <!--      </plugin>-->
    </plugins>
  </build>

</project>
